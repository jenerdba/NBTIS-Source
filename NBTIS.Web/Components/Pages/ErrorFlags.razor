@page "/errorflags"
@inherits ErrorFlagsBase

@using Telerik.Blazor.Components
@using NBTIS.Web.ViewModels
@using NBTIS.Web.Components.PageComponents
@using NBTIS.Core.DTOs

@inject IJSRuntime JS

<PageTitle>Manage Error Flags</PageTitle>


<div class="container">
    <h1 class="mb-2">Manage Error Flags</h1>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"
                    @onclick="ClearSuccessMessage"></button>
            <strong>Success:</strong> @successMessage
        </div>
    }

    <!-- Remove All Error Flags Card -->
    <div class="card shadow-sm border-0 mb-3">
        <div class="card-body">
            <h5 class="card-title mb-3">Remove All Error Flags</h5>
            <button type="button" class="btn btn-primary" @onclick="() => ShowConfirmation(ConfirmationType.All)">
                Remove
            </button>
        </div>
    </div>

    <!-- Remove by State Card -->
    <div class="card shadow-sm border-0 mb-3">
        <div class="card-body">
            <h5 class="card-title mb-3">Remove Error Flags by State or Agency</h5>

            <div class="mt-3 mb-3">
                <StateOrAgencySelection_Radio StateAgencyOption="@stateAgencyOption"
                                              StateAgencyOptionChanged="SetStateAgencyAsync" />
            </div>

            <StateOrAgencySelection_DropDown SelectedState="@selectedState"
                                             SelectedStateChanged="OnSelectedStateChanged"
                                             LocationList="@locationList" />

            <button type="button" class="btn btn-primary mt-2" @onclick="() => ShowConfirmation(ConfirmationType.ByState)">
                Remove
            </button>
        </div>
    </div>

    <!-- Remove by Data Type Card -->
    <div class="card shadow-sm border-0 mb-3">
        <div class="card-body">
            <h5 class="card-title mb-3">Remove Error Flags by Data Set</h5>

            <DataTypeSelection_DropDown SelectedType="@selectedType"
                                        SelectedTypeChanged="@OnDataTypeChanged" />

            <button type="button" class="btn btn-primary mt-2" @onclick="() => ShowConfirmation(ConfirmationType.ByDataSet)">
                Remove
            </button>
        </div>
    </div>
</div>


@code {

    private string selectedState;
    private string selectedType;
    private string stateAgencyOption = "state";

    private Task OnDataTypeChanged(string newType)
    {
        selectedType = newType;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnSelectedStateChanged(string newState)
    {
        selectedState = newState;
        StateHasChanged();
        return Task.CompletedTask;
    }


    protected async Task SetStateAgencyAsync(string? option)
    {
        stateAgencyOption = option;
        locationList = await SetLocationDropdown(option);
    }

    enum ConfirmationType
    {
        All,
        ByState,
        ByDataSet
    }

    async Task ShowConfirmation(ConfirmationType type)
    {
        // Validate if required selection is made
        if (type == ConfirmationType.ByState && string.IsNullOrEmpty(selectedState))
        {
            await JS.InvokeVoidAsync("alert", "Please select a State or Federal Agency before proceeding.");
            return; 
        }

        if (type == ConfirmationType.ByDataSet && string.IsNullOrEmpty(selectedType))
        {
            await JS.InvokeVoidAsync("alert", "Please select a Data Type Category before proceeding.");
            return; 
        }

        string message = type switch
        {
            ConfirmationType.All => "Are you sure you want to remove all 'Ignore in Future' flags?",
            ConfirmationType.ByState => "Are you sure you want to remove 'Ignore in Future' flags for the selected state?",
            ConfirmationType.ByDataSet => "Are you sure you want to remove 'Ignore in Future' flags for the selected data set?",
            _ => "Are you sure?"
        };

        var confirmed = await JS.InvokeAsync<bool>("confirm", message);

        if (confirmed)
        {
            bool result = type switch
            {
                ConfirmationType.All => await _administrationService.UpdateSubmittalErrorsIgnoreAsync(),
                ConfirmationType.ByState => await _administrationService.RemoveFlagsByStateAsync(selectedState),
                ConfirmationType.ByDataSet => await _administrationService.RemoveFlagsByDataSetAsync(selectedType),
                _ => false
            };

            successMessage = result
                ? type switch
                {
                    ConfirmationType.All => "Successfully removed all 'Ignore in Future' flags.",
                    ConfirmationType.ByState => "Successfully removed flags for the selected state.",
                    ConfirmationType.ByDataSet => "Successfully removed flags for the selected data set.",
                    _ => "Action completed."
                }
                : "Action failed.";
        }
    }
}
