@page "/submittals"
@inherits SubmittalsBase

@using Telerik.Blazor.Components
@using NBTIS.Web.ViewModels

<PageTitle>Submittals</PageTitle>

<div class="container">
<h1 class="mb-2">Submittals</h1>

    <div class="small text-muted mb-0">
        An asterisk (<span class="text-danger">*</span>) indicates a required field.
    </div>
<div class="card shadow-sm border-0">
    <div class="card-body">
        <EditForm EditContext="editContext" OnValidSubmit="OnUpload">
            <DataAnnotationsValidator />

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"
                                @onclick="ClearSuccessMessage"></button>
                        <strong>Success:</strong> @successMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(infoMessage))
                {
                    <div class="alert alert-info alert-dismissible fade show" role="alert">
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"
                                @onclick="ClearInfoMessage"></button>
                        <strong>Info:</strong> @infoMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"
                                @onclick="ClearErrorMessage"></button>
                        <strong>Error:</strong> @errorMessage

                        @if (hasJsonFormatError)
                        {
                            <div class="mt-1">
                                Please ensure the file fully matches the 
                                <a href="https://www.fhwa.dot.gov/bridge/snbi/SNBI.Schema.v03.json" target="_blank">
                                    Data Submittal Schema/Format
                                </a>
                                provided on the FHWA SNBI website.
                            </div>
                        }
                    </div>
                }

            <!-- 1. Choose State or Federal Agency -->
            <div class="row mb-3">
                    <div class="col-sm-3"></div>
                <div class="col-sm-9">
                    <InputRadioGroup Name="stateAgencyOption" @bind-Value:get=input.StateAgencyOption @bind-Value:set=SetStateAgencyAsync>
                        <div class="form-check form-check-inline">
                            <InputRadio id="state" Value="@("state")" class="form-check-input" />
                            <label class="form-check-label" for="state">State or Territory</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <InputRadio id="agency" Value="@("agency")" class="form-check-input" />
                            <label class="form-check-label" for="agency">Federal Agency or Tribal Government</label>
                        </div>
                    </InputRadioGroup>
                    <ValidationMessage For="() => input.StateAgencyOption" />
                </div>
            </div>

            <!-- 2. State/Agency Dropdown -->
            <div class="row mb-3">
                <label for="locationDropdown" class="col-sm-3 col-form-label fw-semibold text-end">
                        State or Federal Agency <span class="text-danger">*</span>
                </label>
                <div class="col-sm-9">
                    @if (locationList != null)
                    {
                        <select id="locationDropdown" 
                                class="form-select" 
                                    style="max-width: 600px;"
                                @onchange="UpdateSelectedState" 
                                value="@input.SubmittedBy">
                            <option value="">Select...</option>
                            @foreach (var location in locationList)
                            {
                                <option value="@location.Code">@location.Description</option>
                            }
                        </select>
                        <ValidationMessage For="() => input.SubmittedBy" />
                    }
                    else
                    {
                        <p>Loading states...</p>
                    }
                </div>
            </div>

            <!-- 3. Type of Submittal -->
                <div class="row align-items-center mb-3 ">
                    <label class="col-sm-3 col-form-label fw-semibold text-end" for="fullPartialOption">
                        Type of Submittal <span class="text-danger">*</span>
                </label>
                <div class="col-sm-9">
                    <InputRadioGroup @bind-Value="input.FullPartialOption" Name="fullPartialOption">
                        <div class="form-check form-check-inline">
                            <InputRadio id="full" Value="@("full")" class="form-check-input" />
                            <label class="form-check-label" for="full">Full</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <InputRadio id="partial" Value="@("partial")" class="form-check-input" />
                            <label class="form-check-label" for="partial">Partial</label>
                        </div>
                    </InputRadioGroup>
                    <ValidationMessage For="() => input.FullPartialOption" />
                </div>
            </div>

            <!-- 4. File Upload -->
            <div class="row mb-3">
                    <label class="col-sm-3 col-form-label fw-semibold text-end" for="files">
                    File to Validate (JSON Only) <span class="text-danger">*</span>
                </label>
                <div class="col-sm-9">
                        <InputFile id="files" @key="@_inputFileId" OnChange="@OnInputFileChange" accept=".json" disabled="@_isUploadInProgress" />
                    <ValidationMessage For="() => input.LoadedFiles" /><br />

                    @if (fileNames.Count > 0)
                    {
                        <div class="mt-2">
                            <b>Selected File:</b>
                            <ul class="list-unstyled ms-3">
                                @foreach (var fileName in fileNames)
                                {
                                    <li>
                                        <span class="badge bg-secondary">@fileName</span>
                                    </li>
                                }
                            </ul>
                        </div>
                    }

                    @* Progress bar *@
                    @{
                        var progressCss = "progress " + (displayProgress ? "" : "d-none");
                        var progressWidthStyle = progressPercent + "%";
                    }
                    <div class="@progressCss mt-2">
                        <div class="progress-bar" role="progressbar"
                             style="width:@progressWidthStyle"
                             aria-valuenow="@progressPercent"
                             aria-valuemin="0"
                             aria-valuemax="100">
                            @progressPercent.ToString("F1")%
                        </div>
                    </div>
                </div>
            </div>

            <!-- 5. Comments -->
            <div class="row mb-3">
                    <label for="comments" class="col-sm-3 col-form-label fw-semibold text-end">Comments</label>
                <div class="col-sm-9">
                    <InputTextArea id="comments" 
                                   @bind-Value="input.Comments" 
                                   class="form-control" 
                                   rows="4" 
                                   placeholder="Enter any additional comments..." />
                </div>
            </div>

            <!-- 6. Action Buttons -->
            <div class="row">
                <div class="col-sm-9 offset-sm-3 d-flex gap-3">
                        <button type="submit" class="btn button btn-primary" disabled="@_isUploadInProgress">
                        Upload
                    </button>
                        <button type="reset" class="btn button btn-outline-secondary" @onclick="CancelUpload">
                        Cancel
                    </button>
                </div>
            </div>

        </EditForm>
    </div>
</div>

<!-- Grid + Scoped Loader -->
<div class="position-relative">

    <!-- Loading Indicator -->
 <TelerikLoaderContainer OverlayThemeColor="light"
                            Visible="@( !IsDataLoadComplete )"
                                Text="@null" Class="scoped-loader">
        <Template>
            <TelerikLoader Type="@LoaderType.InfiniteSpinner"
                           Size="@(ThemeConstants.Loader.Size.Large)">
            </TelerikLoader>
        </Template>
    </TelerikLoaderContainer>

    <TelerikGrid @ref="GridRef"
                 Data="@SubmittalsList"
                 TItem="SubmittalItem"
                 EditMode="GridEditMode.Popup"
                 Pageable="true"
                 Sortable="true"
                 FilterMode="@GridFilterMode.FilterMenu"
                 class="mt-3">
        <GridSettings>
            <GridPopupEditSettings Width="850px"
                                   Title="All Comments"
                                   MaxHeight="99vh"
                                   MaxWidth="99vw"
                                   Class="popup-class">
            </GridPopupEditSettings>
            <GridPopupEditFormSettings>
                <FormTemplate Context="gridPopupEditFormTemplateContext">
                    @{
                        EditItem = gridPopupEditFormTemplateContext.Item as SubmittalItem;
                    }
                    <CommentsPopup EditItem="@(EditItem)"
                               CurrentUser="@(CurrentUserService.UserId)"           
                               OnCancel="@OnCancel"
                               />
                </FormTemplate>
            </GridPopupEditFormSettings>
        </GridSettings>

        <GridColumns>
            <GridColumn Field="@nameof(SubmittalItem.SubmittedByDescription)"  Title="State or Agency" Width="155px" HeaderClass="fw-bold">
                <Template Context="context">
                    @{
                        var item = (SubmittalItem)context;
                    }
                    <a href="#" @onclick:preventDefault @onclick="@(() => DownloadFile(item))">
                        @item.SubmittedByDescription
                    </a>
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(SubmittalItem.UploadType)"
                        Title="Type of Submittal"
                        Width="155px"
                        HeaderClass="fw-bold wrap-header" />
            <GridColumn Field="@nameof(SubmittalItem.UploadedBy)"
                        Title="Uploaded By"
                        HeaderClass="fw-bold" />
            <GridColumn Field="@nameof(SubmittalItem.UploadDate)"
                        Title="Upload Date"
                        DisplayFormat="{0:MM/dd/yyyy 'at' h:mm:ss tt}"
                        Width="200px"
                        HeaderClass="fw-bold" />
            <GridColumn Field="@nameof(SubmittalItem.Status)"
                        Title="Status" Width="155px"
                        HeaderClass="fw-bold" />
            <GridCommandColumn Title="Comments" Width="155px">
                <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Comments</GridCommandButton>
            </GridCommandColumn>
            <GridColumn Title="Report"
                        Width="80px"
                        TextAlign="@ColumnTextAlign.Center"
                        HeaderClass="fw-bold">
                <Template Context="context">
                    @{
                        var item = (SubmittalItem)context;
                    }
                    @if (item.ReportContent != null && item.ReportContent.Length > 0)
                    {
                        <button class="btn btn-success" title="Download Processing Report" @onclick="() => DownloadReport(item)">
                            <i class="bi bi-file-earmark-excel"></i>
                        </button>
                    }
                </Template>
            </GridColumn>
            <!-- SubmitAllowed column with icon button if allowed -->
            <GridColumn Title="Submit"
                        Width="80px"
                        TextAlign="@ColumnTextAlign.Center"
                        HeaderClass="fw-bold">
                <Template Context="context">
                    @{
                        var item = (SubmittalItem)context;
                    }
                    @if (item.SubmitAllowed)
                    {
                        <button class="btn btn-primary" title="Submit" @onclick="@(() => ConfirmAndSubmit(item))">
                            <i class="bi bi-send"></i>
                        </button>
                    }
                </Template>
            </GridColumn>
                <!-- CorrectAllowed column with icon button if allowed -->
                <GridColumn Title="Correct"
                            Width="80px"
                            TextAlign="@ColumnTextAlign.Center"
                            HeaderClass="fw-bold">
                    <Template Context="context">
                        @{
                            var item = (SubmittalItem)context;
                        }
                        @if (item.CorrectAllowed)
                        {
                            <button class="btn btn-warning" title="Correct Data" @onclick="@(() => OpenCorrectionPage(item.SubmitId, item.SubmittedBy, item.SubmittedByDescription))">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                        }
                    </Template>
                </GridColumn>
            <!-- DeleteAllowed column with icon button if allowed -->
            <GridColumn Title="Delete"
                        Width="80px"
                        TextAlign="@ColumnTextAlign.Center"
                        HeaderClass="fw-bold">
                <Template Context="context">
                    @{
                        var item = (SubmittalItem)context;
                    }
                    @if (item.DeleteAllowed)
                    {
                        <button class="btn btn-danger" title="Delete" @onclick="@(() => ConfirmAndDelete(item.SubmitId, item.SubmittedByDescription))">
                            <i class="bi bi-trash"></i>
                        </button>
                    }
                        @if (item.CancelAllowed)
                        {
                            <button class="btn btn-danger" title="Cancel" @onclick="@(() => ConfirmAndCancel(item.SubmitId, item.SubmittedByDescription))">
                                <i class="bi bi-trash"></i>
                            </button>
                        }
                </Template>
            </GridColumn>
        </GridColumns>
    </TelerikGrid>

</div>

</div>


@code {

    // Reference to the grid instance
    private TelerikGrid<SubmittalItem>? GridRef { get; set; }

    public SubmittalItem EditItem { get; set; }

    private string newCommentText { get; set; } = string.Empty;

    // private async Task OnValidSubmit()
    // {
    //     LoadData();
    // }

    private async Task OnCancel()
    {
        await ExitEditAsync();
    }

    // private void LoadData()
    // {
    //     // GridData = ProductService.GetProducts().ToList();
    // }
    private async Task ExitEditAsync()
    {
        var state = GridRef?.GetState();
        state.OriginalEditItem = null;
        state.EditItem = null;
        state.InsertedItem = null;

        await GridRef?.SetStateAsync(state);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && GridRef != null)
        {
            // Sort the underlying data by Date descending.
            SubmittalsList = SubmittalsList
                .OrderByDescending(x => x.UploadDate)
                .ToList();

            // Rebind the grid so that the new sort order takes effect,
            // and OnRowRenderHandler will be called again for each row.
            GridRef.Rebind();
        }
    }

}