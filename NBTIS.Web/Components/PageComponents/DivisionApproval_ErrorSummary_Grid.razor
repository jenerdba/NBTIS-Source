@using NBTIS.Data.Models
@using Telerik.Blazor.Components
@using NBTIS.Web.ViewModels
@using NBTIS.Web.Services

@inject SubmittalService SubmittalService
@inject DataContext _context


<div class="container">
    <h1 class="mt-4">Submittal Error Summary</h1>
<TelerikLoaderContainer OverlayThemeColor="light"
                        Visible="@( !IsInitialDataLoadComplete )"
                        Text="@null" Class="initial-data-loader">
    <Template>
        <TelerikLoader Type="@LoaderType.InfiniteSpinner"
                       Size="@(ThemeConstants.Loader.Size.Large)">
        </TelerikLoader>
    </Template>
</TelerikLoaderContainer>

<TelerikGrid Data="@errorSummaries"
TItem="ErrorSummary"
Pageable="true"
Sortable="true"
FilterMode="@GridFilterMode.FilterMenu"
EditMode="@GridEditMode.Incell"
Resizable="true"
OnUpdate="@OnUpdateHandler"
class="mt-3">
    <GridColumns>
        <GridColumn Field="@nameof(ErrorSummary.State)" Title="State" Width="40px" HeaderClass="fw-bold" Editable="false" />
        <GridColumn Field="@nameof(ErrorSummary.BID01)" Title="Bridge No" Width="60px" HeaderClass="fw-bold" Editable="false" />
        <GridColumn Field="@nameof(ErrorSummary.BCL01)" Title="Owner" Width="60px" HeaderClass="fw-bold" Editable="false" />
        <GridColumn Field="@nameof(ErrorSummary.ItemId)" Title="Item ID" Width="60px" HeaderClass="fw-bold" Editable="false" />
        <GridColumn Field="@nameof(ErrorSummary.ItemName)" Title="Item Name" Width="100px" HeaderClass="fw-bold" Editable="false" />
        <GridColumn Field="@nameof(ErrorSummary.SubmittedValue)" Title="Submitted Value" Width="75px" HeaderClass="fw-bold" Editable="false" />
        <GridColumn Field="@nameof(ErrorSummary.ErrorType)" Title="Error Type" Width="60px" HeaderClass="fw-bold" Editable="false" />
        <GridColumn Field="@nameof(ErrorSummary.Description)" Title="Error Description" Width="115px" HeaderClass="fw-bold" Editable="false" />
        <GridColumn Field="@nameof(ErrorSummary.Reviewed)" Title="DBE Reviewed" Width="75px" HeaderClass="fw-bold" TextAlign="@ColumnTextAlign.Center" Editable="false">
            <Template>
                @{
                    var item = (ErrorSummary)context;
                    <input type="checkbox" checked="@item.Reviewed" @onclick:stopPropagation @onchange="(ChangeEventArgs e) => { item.Reviewed = e.Value as bool? ?? false; OnCheckedChanged(item); }" />
                }
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(ErrorSummary.Ignore)" Title="Ignore in Future Years" Width="75px" HeaderClass="fw-bold" TextAlign="@ColumnTextAlign.Center" Editable="false">
            <Template>
                @{
                    var item = (ErrorSummary)context;
                        if (item.ErrorType == "Flag")
                        {
                            <input type="checkbox" checked="@item.Ignore" @onclick:stopPropagation @onchange="(ChangeEventArgs e) => { item.Ignore = e.Value as bool? ?? false; OnCheckedChanged(item); }" />
                        }
                }
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(ErrorSummary.Comment)" Title="Comment" Width="100px" HeaderClass="fw-bold" Editable="true" />
    </GridColumns>
</TelerikGrid>
</div>

@code {
    [Parameter] public List<SubmittalItem> SelectedSubmittals { get; set; } = new();
    [Parameter] public IEnumerable<SubmittalItem> FilteredSubmittals { get; set; }
    public bool IsInitialDataLoadComplete { get; set; } = false;


    private List<ErrorSummary> errorSummaries;

    protected override async Task OnInitializedAsync()
    {
        // Initial load - might not need this if you want to wait for parameter changes
        await LoadErrorSummaries();
    }

    protected override async Task OnParametersSetAsync()
    {
        // This runs when the parent component updates the parameters
        await LoadErrorSummaries();
    }

    private async Task LoadErrorSummaries()
    {
        IsInitialDataLoadComplete = false;

        if (SelectedSubmittals?.Any() == true)
        {
            var submitId = SelectedSubmittals.First().SubmitId;
            var summaries = await SubmittalService.GetErrorSummaryBySubmittal(submitId);

            errorSummaries = summaries ?? new List<ErrorSummary>();
        }
        else
        {
            errorSummaries = new List<ErrorSummary>();
        }

        IsInitialDataLoadComplete = true;
    }

    private async Task OnCheckedChanged(ErrorSummary errorSummary)
    {
        var submitId = SelectedSubmittals.FirstOrDefault()?.SubmitId ?? 0;
        if (submitId != 0)
        {

            bool isReviewed = errorSummary.Reviewed;
            bool isIgnored = errorSummary.Ignore;
            long errorId = errorSummary.ErrorId;
            await SubmittalService.UpdateErrorSummariesAsync(submitId, errorId, isReviewed, isIgnored);

            StateHasChanged();
        }
    }

    private async Task OnUpdateHandler(GridCommandEventArgs args)
    {
        if (args.Item is ErrorSummary updatedItem)
        {
            if (args.Field == nameof(ErrorSummary.Comment))
            {
                var errorSummary = await _context.SubmittalErrors
                  .FindAsync(updatedItem.ErrorId);

                if (errorSummary != null)
                {
                    // Update the Comment field, replace empty string will NULL for DB comformity
                    errorSummary.Comments = string.IsNullOrWhiteSpace(updatedItem.Comment) ? null : updatedItem.Comment;
                    await _context.SaveChangesAsync();

                    await LoadErrorSummaries();

                    StateHasChanged();
                }
            }
        }
    }


}



